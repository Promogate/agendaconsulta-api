generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Administrator {
  id            String             @id @default(cuid())
  name          String
  email         String             @unique
  password_hash String
  admin_level   AdministratorLevel @default(EMPLOYEE)
  created_at    DateTime           @default(now())
  updated_at    DateTime           @default(now())

  @@map("administrators")
}

enum AdministratorLevel {
  ADMIN
  MANAGER
  EMPLOYEE
}

model User {
  id                String   @id @default(cuid())
  name              String
  email             String   @unique
  password_hash     String
  address           String?
  phone             String?
  is_phone_whatsapp Boolean  @default(false)
  created_at        DateTime @default(now())
  updated_at        DateTime @default(now())

  @@map("users")
}

model Doctor {
  id                String                   @id @default(cuid())
  first_name        String
  last_name         String
  email             String                   @unique
  password_hash     String
  crm               String?
  phone             String?
  is_phone_whatsapp Boolean                  @default(false)
  specializations   SpecializationOnDoctor[]

  @@map("doctors")
}

model Specialization {
  id                  String                   @id @default(cuid())
  specialization_name String
  clinics             SpecializationOnClinic[]
  doctors             SpecializationOnDoctor[]

  @@map("specializations")
}

model SpecializationOnDoctor {
  id                String         @id @default(cuid())
  doctor_id         String
  specialization_id String
  doctor            Doctor         @relation(fields: [doctor_id], references: [id])
  specialization    Specialization @relation(fields: [specialization_id], references: [id])

  @@unique([doctor_id, specialization_id])
  @@map("specialization_on_doctors")
}

model SpecializationOnClinic {
  id                String         @id @default(cuid())
  clinic_id         String
  specialization_id String
  clinic            Clinic         @relation(fields: [clinic_id], references: [id])
  specialization    Specialization @relation(fields: [specialization_id], references: [id])

  @@unique([clinic_id, specialization_id])
  @@map("specialization_on_clinics")
}

model DoctorHospitalAffiliation {
  id          String   @id @default(cuid())
  doctor_id   String
  clinic_name String
  city        String
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now())

  @@map("doctor_hospital_affiliation")
}

model Clinic {
  id                String                   @id @default(cuid())
  name              String
  email             String                   @unique
  phone             String
  address           String
  is_phone_whatsapp Boolean                  @default(false)
  created_at        DateTime                 @default(now())
  updated_at        DateTime                 @default(now())
  specializations   SpecializationOnClinic[]

  @@map("clinics")
}

model ClinicDoctorAvailability {
  id           String   @id @default(cuid())
  clinic_id    String
  day_of_week  String
  start_time   DateTime
  end_time     DateTime
  is_available Boolean  @default(false)

  @@map("clinic_doctor_availatibilities")
}

model Appointment {
  id                 String            @id @default(cuid())
  user_id            String
  clinic_id          String
  start_time         DateTime
  appointment_status AppointmentStatus @default(PENDING)

  @@map("appointments")
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

model ClientReview {
  id                   String   @id @default(cuid())
  user_id              String
  doctor_id            String
  is_review_anonymous  Boolean  @default(false)
  is_doctor_recommende Boolean  @default(true)
  rating               Int
  created_at           DateTime @default(now())
  updated_at           DateTime @default(now())

  @@map("user_reviews")
}
